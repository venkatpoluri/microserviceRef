//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace TradingPartnerManagement.Domain.TradingPartners.Dtos
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// A representation of a trading partner document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TradingPartnerDocument
    {

        [System.Text.Json.Serialization.JsonPropertyName("roles")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Roles> Roles { get; set; } = new System.Collections.ObjectModel.Collection<Roles>();


        [System.Text.Json.Serialization.JsonPropertyName("postal_addresses")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Postal_addresses> Postal_addresses { get; set; } = new System.Collections.ObjectModel.Collection<Postal_addresses>();


        [System.Text.Json.Serialization.JsonPropertyName("phone_addresses")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Phone_addresses>? Phone_addresses { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("electronic_addresses")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Electronic_addresses? Electronic_addresses { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("notes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Notes>? Notes { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("trading_partner_properties")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Trading_partner_properties>? Trading_partner_properties { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("minority_vendors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Minority_vendors>? Minority_vendors { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Roles
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Type of the role
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumMemberConverter))]
        public RolesType Type { get; set; } = default!;

        /// <summary>
        /// ?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statuses")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Statuses> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<Statuses>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Postal_addresses
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Type of the postal address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumMemberConverter))]
        public Postal_addressesType Type { get; set; } = default!;

        /// <summary>
        /// first line of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address_1 { get; set; } = default!;

        /// <summary>
        /// second line of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Address_2 { get; set; } = default!;

        /// <summary>
        /// city of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        /// <summary>
        /// state type of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state_type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumMemberConverter))]
        public Postal_addressesState_type? State_type { get; set; } = default!;

        /// <summary>
        /// state name of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state_name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State_name { get; set; } = default!;

        /// <summary>
        /// state code of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state_code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? State_code { get; set; } = default!;

        /// <summary>
        /// country name of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country_name { get; set; } = default!;

        /// <summary>
        /// country code of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Country_code { get; set; } = default!;

        /// <summary>
        /// country code of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postal_code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Postal_code { get; set; } = default!;

        /// <summary>
        /// Is the concept provided?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_concept_provided")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_concept_provided { get; set; } = false;

        /// <summary>
        /// Is primary address?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_primary")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_primary { get; set; } = false;

        /// <summary>
        /// Is emergency contact?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_emergency_contact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_emergency_contact { get; set; } = false;

        /// <summary>
        /// Is do not contact?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_do_not_contact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_do_not_contact { get; set; } = false;

        /// <summary>
        /// note for the use of address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("latitude")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(-90D, 90D)]
        public double? Latitude { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("longitude")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(-180D, 180D)]
        public double? Longitude { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Phone_addresses
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Type of the phone address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumMemberConverter))]
        public Phone_addressesType Type { get; set; } = default!;

        /// <summary>
        /// country code for phone address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,3}$")]
        public string Country_code { get; set; } = default!;

        /// <summary>
        /// area code for phone address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("area_code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Area_code { get; set; } = default!;

        /// <summary>
        /// phone number for address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone_number")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{7,18}$")]
        public string Phone_number { get; set; } = default!;

        /// <summary>
        /// phone extension for address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone_extension")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Phone_extension { get; set; } = default!;

        /// <summary>
        /// Is the concept provided?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_concept_provided")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_concept_provided { get; set; } = false;

        /// <summary>
        /// Is primary address?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_primary")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_primary { get; set; } = false;

        /// <summary>
        /// Is emergency contact?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_emergency_contact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_emergency_contact { get; set; } = false;

        /// <summary>
        /// Is do not contact?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_do_not_contact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_do_not_contact { get; set; } = false;

        /// <summary>
        /// note for the use of address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Electronic_addresses
    {

        [System.Text.Json.Serialization.JsonPropertyName("electronic_email_addresses")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Electronic_email_addresses>? Electronic_email_addresses { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("electronic_website_addresses")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Electronic_website_addresses>? Electronic_website_addresses { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Notes
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Type of the phone address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumMemberConverter))]
        public NotesType Type { get; set; } = default!;

        /// <summary>
        /// note
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Note { get; set; } = default!;

        /// <summary>
        /// note created date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_on")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime Created_on { get; set; } = default!;

        /// <summary>
        /// Note last modified by?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_modified_by")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Last_modified_by { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Trading_partner_properties
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumMemberConverter))]
        public Trading_partner_propertiesName Name { get; set; } = default!;

        /// <summary>
        /// property value
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string? Value { get; set; } = default!;


        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumMemberConverter))]
        public Trading_partner_propertiesType Type { get; set; } = default!;



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Type of the minority vendor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Flags]
    
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumMemberConverter))]
    
    [System.ComponentModel.TypeConverter(typeof(EnumMemberConverter<Minority_vendors>))]
    public enum Minority_vendors {

        [System.Runtime.Serialization.EnumMember(Value = @"African American")]
        African_American = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Asian American")]
        Asian_American = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Hispanic American")]
        Hispanic_American = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Native American")]
        Native_American = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"Woman")]
        Woman = 16,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Flags]
    
    [System.ComponentModel.TypeConverter(typeof(EnumMemberConverter<RolesType>))]
    public enum RolesType {

        [System.Runtime.Serialization.EnumMember(Value = @"Equipment/Smallwares")]
        Equipment_Smallwares = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Equipment Distributor")]
        Equipment_Distributor = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Food/Packaging")]
        Food_Packaging = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Distributor")]
        Distributor = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"Premiums")]
        Premiums = 16,


        [System.Runtime.Serialization.EnumMember(Value = @"Bakery")]
        Bakery = 32,


        [System.Runtime.Serialization.EnumMember(Value = @"Supplier")]
        Supplier = 64,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Statuses
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// ?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumMemberConverter))]
        public StatusesStatus Status { get; set; } = default!;

        /// <summary>
        /// ?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("from_date")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime From_date { get; set; } = default!;

        /// <summary>
        /// ?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("thru_date")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Thru_date { get; set; } = default!;



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Flags]
    
    [System.ComponentModel.TypeConverter(typeof(EnumMemberConverter<Postal_addressesType>))]
    public enum Postal_addressesType {

        [System.Runtime.Serialization.EnumMember(Value = @"P.O. Box")]
        P_O__Box = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"General Delivery")]
        General_Delivery = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Street Address")]
        Street_Address = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Legal")]
        Legal = 8,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Flags]
    
    [System.ComponentModel.TypeConverter(typeof(EnumMemberConverter<Postal_addressesState_type>))]
    public enum Postal_addressesState_type {

        [System.Runtime.Serialization.EnumMember(Value = @"Country")]
        Country = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"State")]
        State = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Territory")]
        Territory = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"BKC DMA")]
        BKC_DMA = 16,


        [System.Runtime.Serialization.EnumMember(Value = @"Province")]
        Province = 32,


        [System.Runtime.Serialization.EnumMember(Value = @"RSI Region")]
        RSI_Region = 64,


        [System.Runtime.Serialization.EnumMember(Value = @"County")]
        County = 128,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Flags]
    
    [System.ComponentModel.TypeConverter(typeof(EnumMemberConverter<Phone_addressesType>))]
    public enum Phone_addressesType {

        [System.Runtime.Serialization.EnumMember(Value = @"Home Phone")]
        Home_Phone = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Cell Phone")]
        Cell_Phone = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Office Phone")]
        Office_Phone = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Fax")]
        Fax = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"Toll Free")]
        Toll_Free = 16,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Electronic_email_addresses
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Type of the electronic address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumMemberConverter))]
        public Electronic_email_addressesType Type { get; set; } = TradingPartnerManagement.Domain.TradingPartners.Dtos.Electronic_email_addressesType.Email;

        /// <summary>
        /// Email of the user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; } = default!;

        /// <summary>
        /// Is the concept provided?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_concept_provided")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_concept_provided { get; set; } = false;

        /// <summary>
        /// Is primary address?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_primary")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_primary { get; set; } = false;

        /// <summary>
        /// Is emergency contact?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_emergency_contact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_emergency_contact { get; set; } = false;

        /// <summary>
        /// Is do not contact?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_do_not_contact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_do_not_contact { get; set; } = false;

        /// <summary>
        /// note for the use of address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Electronic_website_addresses
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Type of the electronic address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumMemberConverter))]
        public Electronic_website_addressesType Type { get; set; } = TradingPartnerManagement.Domain.TradingPartners.Dtos.Electronic_website_addressesType.Website;

        /// <summary>
        /// url of the user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("website")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(http?|https?|wss?|ftp)://.*")]
        public System.Uri Website { get; set; } = default!;

        /// <summary>
        /// Is the concept provided?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_concept_provided")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_concept_provided { get; set; } = false;

        /// <summary>
        /// Is primary address?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_primary")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_primary { get; set; } = false;

        /// <summary>
        /// Is emergency contact?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_emergency_contact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_emergency_contact { get; set; } = false;

        /// <summary>
        /// Is do not contact?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_do_not_contact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Is_do_not_contact { get; set; } = false;

        /// <summary>
        /// note for the use of address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Flags]
    
    [System.ComponentModel.TypeConverter(typeof(EnumMemberConverter<NotesType>))]
    public enum NotesType {

        [System.Runtime.Serialization.EnumMember(Value = @"General")]
        General = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Voting Note")]
        Voting_Note = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Contact")]
        Contact = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Flags]
    
    [System.ComponentModel.TypeConverter(typeof(EnumMemberConverter<Trading_partner_propertiesName>))]
    public enum Trading_partner_propertiesName {

        [System.Runtime.Serialization.EnumMember(Value = @"Is Part Supplier")]
        Is_Part_Supplier = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Is Integrated Supplier")]
        Is_Integrated_Supplier = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Is Supplier SKU Used")]
        Is_Supplier_SKU_Used = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"Is Order Online")]
        Is_Order_Online = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"In Supplier Directory")]
        In_Supplier_Directory = 16,


        [System.Runtime.Serialization.EnumMember(Value = @"Is KES Supplier")]
        Is_KES_Supplier = 32,


        [System.Runtime.Serialization.EnumMember(Value = @"Is Triggered")]
        Is_Triggered = 64,


        [System.Runtime.Serialization.EnumMember(Value = @"Is In Least Cost Analysis")]
        Is_In_Least_Cost_Analysis = 128,


        [System.Runtime.Serialization.EnumMember(Value = @"Equipment/Smallwares Role in Least Cost")]
        Equipment_Smallwares_Role_in_Least_Cost = 256,


        [System.Runtime.Serialization.EnumMember(Value = @"Food/Packaging Role in Least Cost")]
        Food_Packaging_Role_in_Least_Cost = 512,


        [System.Runtime.Serialization.EnumMember(Value = @"Is Equip Distributor Price Defaulted")]
        Is_Equip_Distributor_Price_Defaulted = 1024,


        [System.Runtime.Serialization.EnumMember(Value = @"Is Evergreen TP")]
        Is_Evergreen_TP = 2048,


        [System.Runtime.Serialization.EnumMember(Value = @"Evergreen TP Date")]
        Evergreen_TP_Date = 4096,


        [System.Runtime.Serialization.EnumMember(Value = @"ERedbook Fee")]
        ERedbook_Fee = 8192,


        [System.Runtime.Serialization.EnumMember(Value = @"Products Supplied Desc")]
        Products_Supplied_Desc = 16384,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Flags]
    
    [System.ComponentModel.TypeConverter(typeof(EnumMemberConverter<Trading_partner_propertiesType>))]
    public enum Trading_partner_propertiesType {

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
        Boolean = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
        Decimal = 16,


        [System.Runtime.Serialization.EnumMember(Value = @"datetime")]
        Datetime = 32,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Flags]
    
    [System.ComponentModel.TypeConverter(typeof(EnumMemberConverter<StatusesStatus>))]
    public enum StatusesStatus {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Flags]
    
    [System.ComponentModel.TypeConverter(typeof(EnumMemberConverter<Electronic_email_addressesType>))]
    public enum Electronic_email_addressesType {

        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Website")]
        Website = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"UserAccount")]
        UserAccount = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Flags]
    
    [System.ComponentModel.TypeConverter(typeof(EnumMemberConverter<Electronic_website_addressesType>))]
    public enum Electronic_website_addressesType {

        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Website")]
        Website = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"UserAccount")]
        UserAccount = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.7.2.0 (Newtonsoft.Json v13.0.0.0)")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTime>
    {
        public override System.DateTime Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTime.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTime value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }
}